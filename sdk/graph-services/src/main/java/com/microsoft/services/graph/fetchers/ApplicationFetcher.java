/*******************************************************************************
 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the MIT or Apache License; see LICENSE in the source repository
 root for authoritative license information.ï»¿

 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.

 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
 ******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.Application;
import com.microsoft.services.graph.DirectoryObject;
import com.microsoft.services.graph.ExtensionProperty;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.core.Readable;

/**
 * The type  ApplicationFetcher.
 */
public class ApplicationFetcher extends OrcEntityFetcher<Application,ApplicationOperations>
                                     implements Readable<Application> {

     /**
     * Instantiates a new ApplicationFetcher.
     *
     * @param urlComponent the url component
     * @param parent the parent
     */
     public ApplicationFetcher(String urlComponent, OrcExecutable parent) {
        super(urlComponent, parent, Application.class, ApplicationOperations.class);
    }

     /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public ApplicationFetcher addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public ApplicationFetcher addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

        
     /**
     * Gets extension properties.
     *
     * @return the extension properties
     */
    public OrcCollectionFetcher<ExtensionProperty, ExtensionPropertyFetcher, ExtensionPropertyCollectionOperations> getExtensionProperties() {
        return new OrcCollectionFetcher<ExtensionProperty, ExtensionPropertyFetcher, ExtensionPropertyCollectionOperations>("extensionProperties", this, ExtensionProperty.class, ExtensionPropertyCollectionOperations.class);
    }

    /**
     * Gets extension property.
     *
     * @return the extension property
     */
    public ExtensionPropertyFetcher getExtensionProperty(String id){
         return new OrcCollectionFetcher<ExtensionProperty, ExtensionPropertyFetcher, ExtensionPropertyCollectionOperations>("extensionProperties", this, ExtensionProperty.class, ExtensionPropertyCollectionOperations.class).getById(id);
    }
     /**
     * Gets createdonbehalfof.
     *
     * @return the created on behalf of
     */
    public DirectoryObjectFetcher getCreatedOnBehalfOf() {
        return new DirectoryObjectFetcher("createdOnBehalfOf", this);
    }

     /**
     * Gets owners.
     *
     * @return the owners
     */
    public OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations> getOwners() {
        return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("owners", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class);
    }

    /**
     * Gets owner.
     *
     * @return the owner
     */
    public DirectoryObjectFetcher getOwner(String id){
         return new OrcCollectionFetcher<DirectoryObject, DirectoryObjectFetcher, DirectoryObjectCollectionOperations>("owners", this, DirectoryObject.class, DirectoryObjectCollectionOperations.class).getById(id);
    }

}
