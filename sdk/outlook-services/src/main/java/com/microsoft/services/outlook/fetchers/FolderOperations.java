/*******************************************************************************
 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the MIT or Apache License; see LICENSE in the source repository
 root for authoritative license information.ï»¿

 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.

 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
 ******************************************************************************/
package com.microsoft.services.outlook.fetchers;

import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import com.microsoft.services.orc.serialization.*;
import com.microsoft.services.outlook.Folder;

import static com.microsoft.services.orc.core.Helpers.*;

/**
 * The type FolderOperations.
 */
public class FolderOperations extends EntityOperations {

     /**
      * Instantiates a new FolderOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public FolderOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public FolderOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public FolderOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }



    /**
     * Copy listenable future.
     * @param destinationId the destinationId
     * @return the listenable future
     */
    public ListenableFuture<Folder> copy(String destinationId) {
        JsonSerializer serializer = getResolver().getJsonSerializer();
        String serializedDestinationId = serializer.serialize(destinationId);


        ListenableFuture<String> future = copyRaw(serializedDestinationId);
        return transformToEntityListenableFuture(future, Folder.class, getResolver());

    }

     /**
     * CopyRaw listenable future.
     * @param destinationId the destinationId
     * @return the listenable future
     */
    public ListenableFuture<String> copyRaw(String destinationId){

        java.util.Map<String, String> map = new java.util.HashMap<String, String>();

        map.put("DestinationId", destinationId);

        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);

        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));

        request.getUrl().appendPathComponent("Microsoft.OutlookServices.Copy");

        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }




    /**
     * Move listenable future.
     * @param destinationId the destinationId
     * @return the listenable future
     */
    public ListenableFuture<Folder> move(String destinationId) {
        JsonSerializer serializer = getResolver().getJsonSerializer();
        String serializedDestinationId = serializer.serialize(destinationId);


        ListenableFuture<String> future = moveRaw(serializedDestinationId);
        return transformToEntityListenableFuture(future, Folder.class, getResolver());

    }

     /**
     * MoveRaw listenable future.
     * @param destinationId the destinationId
     * @return the listenable future
     */
    public ListenableFuture<String> moveRaw(String destinationId){

        java.util.Map<String, String> map = new java.util.HashMap<String, String>();

        map.put("DestinationId", destinationId);

        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);

        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));

        request.getUrl().appendPathComponent("Microsoft.OutlookServices.Move");

        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}
